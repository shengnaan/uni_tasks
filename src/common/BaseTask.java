package common;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.*;

public abstract class BaseTask {
    protected SQLTools sqlTools;
    protected static String menuText;
    protected static Map<String, Map<String, String>> tableSchemas;

    public BaseTask(SQLTools sqlTools) throws SQLException {
        this.sqlTools = sqlTools;
    }

    public static class TableAndColumns {
        private final String tableName;
        private final Map<String, String> columns;

        public TableAndColumns(String tableName, Map<String, String> columns) {
            this.tableName = tableName;
            this.columns = columns;
        }

        public String getTableName() {
            return tableName;
        }

        public String getColumn(String prompt) {
            return columns.get(prompt);
        }

        public Map<String, Object> createInsertMap(Map<String, Object> logicalToValue) {
            Map<String, Object> result = new LinkedHashMap<>();
            for (Map.Entry<String, Object> entry : logicalToValue.entrySet()) {
                String realColumnName = columns.get(entry.getKey());
                if (realColumnName != null) {
                    result.put(realColumnName, entry.getValue());
                }
            }
            return result;
        }
    }

    public void showMenu(String menuText) {
        System.out.println("üìã –ú–µ–Ω—é:");
        System.out.println(menuText);
    }

    public void showTables() throws SQLException {
        this.sqlTools.showTables();
    }

    public void createTables() throws SQLException {
        Scanner scanner = new Scanner(System.in);

        for (Map.Entry<String, Map<String, String>> entry : tableSchemas.entrySet()) {
            String tableName;
            while (true) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ö–µ–º—ã (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):");
                tableName = scanner.nextLine().trim();

                if (sqlTools.isTableExists(tableName)) {
                    System.out.println("–¢–∞–±–ª–∏—Ü–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                    return;
                }
                if (tableName.length() > 63) {
                    System.out.println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç 63 —Å–∏–º–≤–æ–ª–∞. –ë—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ: " +
                            tableName.substring(0, 63));
                    tableName = tableName.substring(0, 63);
                }
                if (tableName.matches("^[a-zA-Z][a-zA-Z0-9_]*$")) {
                    break;
                }
                System.out.println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n" +
                        "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã\n" +
                        "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n" +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }

            Map<String, String> columns = new LinkedHashMap<>();
            int colIndex = 0;
            for (Map.Entry<String, String> column : entry.getValue().entrySet()) {
                String columnName;
                while (true) {
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ #" + (colIndex + 1) + " (—Ç–∏–ø: " + column.getValue() + "):");
                    columnName = scanner.nextLine().trim();
                    if (columnName.matches("^[a-zA-Z][a-zA-Z0-9_]*$") && columnName.length() <= 63) {
                        if (!columns.containsKey(columnName)) {
                            break;
                        } else {
                            System.out.println("–û—à–∏–±–∫–∞: —Å—Ç–æ–ª–±–µ—Ü —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                        }
                    }
                    System.out.println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n" +
                            "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã\n" +
                            "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n" +
                            "- –ë—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 63 —Å–∏–º–≤–æ–ª–æ–≤\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                columns.put(columnName, column.getValue());
                colIndex++;
            }

            this.sqlTools.createTables(columns, tableName);
        }
    }

    public void insertRowIntoDB(String tableName, Map<String, Object> data) throws SQLException {
        this.sqlTools.insertRowIntoDB(tableName, data);
    }

    public void saveToExcel() throws SQLException {
        this.sqlTools.saveToExcel();
    }

    public boolean hasTables() throws SQLException {
        return this.sqlTools.hasTables();
    }

    public TableAndColumns promptTableAndColumns(
            Scanner scanner,
            List<String> columnsPrompts
    ) throws SQLException {

        String tableName;
        while (true) {
            tableName = getNonEmptyInput(scanner, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:");
            if (!sqlTools.isTableExists(tableName)) {
                System.out.println("–û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            } else {
                break;
            }
        }

        Map<String, String> columnMapping = new LinkedHashMap<>();

        for (String prompt : columnsPrompts) {
            String expectedType = extractTypeFromPrompt(prompt);

            while (true) {
                String userColumn = getNonEmptyInput(scanner, prompt);

                if (!sqlTools.isColumnExists(tableName, userColumn)) {
                    System.out.println("–û—à–∏–±–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü–µ '" + tableName + "' –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '" + userColumn + "'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                if (columnMapping.containsValue(userColumn)) {
                    System.out.println("–û—à–∏–±–∫–∞: —Å—Ç–æ–ª–±–µ—Ü '" + userColumn + "' —É–∂–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    continue;
                }

                String realTypeFromDB = sqlTools.getColumnType(tableName, userColumn);

                if (expectedType != null && !isTypeMatch(realTypeFromDB, expectedType)) {
                    System.out.printf("–û—à–∏–±–∫–∞: —Å—Ç–æ–ª–±–µ—Ü '%s' –∏–º–µ–µ—Ç —Ç–∏–ø '%s', –∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è '%s'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.%n",
                            userColumn, realTypeFromDB, expectedType);
                    continue;
                }

                columnMapping.put(prompt, userColumn);
                break;
            }
        }

        return new TableAndColumns(tableName, columnMapping);
    }

    private String extractTypeFromPrompt(String prompt) {
        String marker = "(—Ç–∏–ø ";
        int start = prompt.indexOf(marker);
        if (start == -1) {
            return null;
        }
        start += marker.length();

        int bracketLevel = 0;
        int end = -1;

        for (int i = start; i < prompt.length(); i++) {
            char c = prompt.charAt(i);
            if (c == '(') {
                bracketLevel++;
            } else if (c == ')') {
                if (bracketLevel == 0) {
                    end = i;
                    break;
                } else {
                    bracketLevel--;
                }
            }
        }

        if (end == -1) {
            return null;
        }

        return prompt.substring(start, end).trim();
    }

    private boolean isTypeMatch(String realType, String expectedType) {
        if (realType == null) return false;
        return realType.trim().equalsIgnoreCase(expectedType.trim());
    }

    protected String getNonEmptyInput(Scanner scanner, String promptMessage) {
        while (true) {
            System.out.println(promptMessage);
            String input = scanner.nextLine().trim();
            if (!input.isEmpty()) {
                return input;
            }
            System.out.println("–û—à–∏–±–∫–∞: –≤–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    public String getSerialColumn(String tableName) throws SQLException {
        return sqlTools.findSerialColumn(tableName);
    }

    public void closeConnection() throws SQLException {
        this.sqlTools.closeConnection();
    }
}