package common;

import java.io.FileOutputStream;
import java.sql.*;
import java.util.*;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public final class SQLTools {

    private final Connection conn;
    private final Map<String, Map<String, String>> tableSchemas;

    public SQLTools(String dbName, Map<String, Map<String, String>> tableSchemas) throws SQLException {
        this.conn = DriverManager.getConnection(Settings.getDatabaseUrl(dbName));
        this.tableSchemas = tableSchemas;
    }

    public void showTables() throws SQLException {
        String query = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            boolean hasTables = false;

            while (rs.next()) {
                hasTables = true;
                String tableName = rs.getString("table_name");
                System.out.println("\n–¢–∞–±–ª–∏—Ü–∞: " + tableName);

                String columnsQuery = """
                            SELECT column_name, data_type
                            FROM information_schema.columns
                            WHERE table_schema = 'public' AND table_name = ?
                        """;
                try (PreparedStatement colStmt = conn.prepareStatement(columnsQuery)) {
                    colStmt.setString(1, tableName);
                    try (ResultSet colRs = colStmt.executeQuery()) {
                        while (colRs.next()) {
                            System.out.printf("   üîπ %s : %s%n", colRs.getString("column_name"), colRs.getString("data_type"));
                        }
                    }
                }
            }
            if (!hasTables) {
                System.out.println("–¢–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.");
            }
        }
    }

    public void createTables(Map<String, String> columns, String tableName) throws SQLException {
        StringBuilder sb = new StringBuilder("CREATE TABLE ");
        sb.append('"').append(tableName).append('"').append(" (");

        int i = 0;
        for (Map.Entry<String, String> column : columns.entrySet()) {
            sb.append('"').append(column.getKey()).append('"')
                    .append(" ").append(column.getValue());
            if (i < columns.size() - 1) sb.append(", ");
            i++;
        }

        sb.append(")");

        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sb.toString());
            System.out.println("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: " + tableName);
        }
    }


    public void insertRowIntoDB(String tablename, Map<String, Object> data) throws SQLException {
        System.out.println(tablename);
        if (!isTableExists(tablename)) {
            throw new SQLException("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ö–µ–º–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '" + tablename + "'");
        }

        if (data == null || data.isEmpty()) {
            throw new IllegalArgumentException("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
        }

        String columns = String.join(", ", data.keySet());
        String placeholders = String.join(", ", data.keySet().stream().map(k -> "?").toList());

        String sql = "INSERT INTO " + tablename + " (" + columns + ") VALUES (" + placeholders + ")";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            int index = 1;
            for (Object value : data.values()) {
                pstmt.setObject(index++, value);
            }
            pstmt.executeUpdate();
        }
    }


    public boolean isTableExists(String tableName) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet rs = meta.getTables(null, null, tableName, new String[]{"TABLE"})) {
            return rs.next();
        }
    }

    public void saveToExcel() throws SQLException {
        Scanner sc = new Scanner(System.in);

        String tableName;
        while (true) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:");
            tableName = sc.nextLine().trim();
            if (!isTableExists(tableName)) {
                System.out.println("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            } else {
                break;
            }
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:");
        String fileName = sc.nextLine().trim();
        if (!fileName.toLowerCase().endsWith(".xlsx")) {
            fileName += ".xlsx";
        }

        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            System.out.println("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: " + tableName);
            String query = "SELECT * FROM " + tableName;

            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(query)) {

                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                XSSFSheet sheet = workbook.createSheet(tableName);

                Row titleRow = sheet.createRow(0);
                titleRow.createCell(0).setCellValue("–¢–∞–±–ª–∏—Ü–∞: " + tableName);

                Row header = sheet.createRow(1);
                for (int i = 1; i <= columnCount; i++) {
                    header.createCell(i - 1).setCellValue(metaData.getColumnName(i));
                }

                StringBuilder headerBuilder = new StringBuilder();
                headerBuilder.append("|");
                for (int i = 1; i <= columnCount; i++) {
                    headerBuilder.append(" ")
                            .append(metaData.getColumnName(i))
                            .append(" |");
                }
                System.out.println(headerBuilder);

                int rowIndex = 2;
                while (rs.next()) {
                    Row row = sheet.createRow(rowIndex++);
                    StringBuilder rowBuilder = new StringBuilder();
                    rowBuilder.append("|");

                    for (int i = 1; i <= columnCount; i++) {
                        Object value = rs.getObject(i);

                        String cellValue = (value != null) ? value.toString() : "";
                        row.createCell(i - 1).setCellValue(cellValue);

                        rowBuilder.append(" ")
                                .append(cellValue)
                                .append(" |");
                    }

                    System.out.println(rowBuilder);
                }

                for (int i = 0; i < columnCount; i++) {
                    sheet.autoSizeColumn(i);
                }

            } catch (SQLException e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã " + tableName + ": " + e.getMessage());
                return;
            }

            try (FileOutputStream fos = new FileOutputStream(fileName)) {
                workbook.write(fos);
                System.out.println("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: " + fileName);
            }

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }


    public void closeConnection() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
            System.out.println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
        }
    }

    public boolean hasTables() throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet rs = meta.getTables(null, null, "%", new String[]{"TABLE"})) {
            return rs.next();
        }
    }

    public boolean isColumnExists(String tableName, String columnName) throws SQLException {
        String query = """
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_schema = 'public'
                      AND table_name = ?
                      AND column_name = ?
                """;
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, tableName);
            stmt.setString(2, columnName);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        }
    }

    public String getColumnType(String tableName, String columnName) throws SQLException {
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ connection —Ç–∏–ø–∞ java.sql.Connection
        // –∏ —á—Ç–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ SQLTools —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
        DatabaseMetaData metaData = conn.getMetaData();

        // –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –°–£–ë–î –∏–º—è —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–æ–∂–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ;
        // —á–∞—Å—Ç–æ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –ø—Ä–∏–≤–µ—Å—Ç–∏ –∏—Ö –∫ –≤–µ—Ä—Ö–Ω–µ–º—É/–Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
        try (ResultSet columns = metaData.getColumns(null, null, tableName, columnName)) {
            if (columns.next()) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö. –ü–æ–ª–µ "TYPE_NAME" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
                // (–Ω–∞–ø—Ä–∏–º–µ—Ä, "VARCHAR", "INT", "FLOAT", "CHAR" –∏ —Ç. –¥.)
                String typeName = columns.getString("TYPE_NAME");
                int size = columns.getInt("COLUMN_SIZE");

                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø, –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "VARCHAR(255)"
                // –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –Ω—é–∞–Ω—Å—ã: –Ω–∞–ø—Ä–∏–º–µ—Ä, "TEXT" –Ω–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç size.
                // –ù–∏–∂–µ ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
                if (typeName != null) {
                    typeName = typeName.trim().toUpperCase();
                    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞, –¥–æ–±–∞–≤–∏–º —Ä–∞–∑–º–µ—Ä—ã
                    if (typeName.contains("CHAR")) {
                        return typeName + "(" + size + ")";
                    } else {
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–∏–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä "INTEGER", "FLOAT"
                        return typeName;
                    }
                }
            }
        }

        // –ï—Å–ª–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–æ–ª–±–µ—Ü), –≤–µ—Ä–Ω—ë–º null –∏–ª–∏ –±—Ä–æ—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return null;
    }

    public long getLastInsertedId(String tableName, String columnName) throws SQLException {
        String sql = "SELECT MAX(" + columnName + ") FROM " + tableName;
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                return rs.getLong(1);
            } else {
                throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π ID");
            }
        }
    }

    public void updateRowInDB(String tableName, Map<String, Object> data, long id) throws SQLException {
        StringBuilder query = new StringBuilder("UPDATE " + tableName + " SET ");
        List<String> assignments = new ArrayList<>();
        List<Object> values = new ArrayList<>();

        for (Map.Entry<String, Object> entry : data.entrySet()) {
            assignments.add(entry.getKey() + " = ?");
            values.add(entry.getValue());
        }

        query.append(String.join(", ", assignments));
        String serialColumn = findSerialColumn(tableName);
        query.append(" WHERE ").append(serialColumn).append(" = ?");

        values.add(id);

        try (PreparedStatement stmt = conn.prepareStatement(query.toString())) {
            for (int i = 0; i < values.size(); i++) {
                stmt.setObject(i + 1, values.get(i));
            }
            stmt.executeUpdate();
        }
    }

    public String findSerialColumn(String tableName) throws SQLException {
        final String query = """
                    SELECT column_name,
                           data_type,
                           column_default
                    FROM information_schema.columns
                    WHERE table_schema = 'public'
                      AND table_name = ?
                    ORDER BY ordinal_position
                """;

        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, tableName);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    String columnName = rs.getString("column_name");
                    String columnDefault = rs.getString("column_default");
                    if (columnDefault != null && columnDefault.toLowerCase().startsWith("nextval(")) {
                        return columnName;
                    }
                }
            }
        }
        throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±–µ—Ü SERIAL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã " + tableName);
    }
}