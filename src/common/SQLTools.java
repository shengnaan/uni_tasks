package common;

import java.io.FileOutputStream;
import java.sql.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public final class SQLTools {

    private final Connection conn;
    private final Map<String, Map<String, String>> tableSchemas;

    public SQLTools(String dbName, Map<String, Map<String, String>> tableSchemas) throws SQLException {
        this.conn = DriverManager.getConnection(Settings.getDatabaseUrl(dbName));
        this.tableSchemas = tableSchemas;
    }

    public void showTables() throws SQLException {
        String query = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            boolean hasTables = false;

            while (rs.next()) {
                hasTables = true;
                String tableName = rs.getString("table_name");
                System.out.println("\n–¢–∞–±–ª–∏—Ü–∞: " + tableName);

                String columnsQuery = """
                            SELECT column_name, data_type
                            FROM information_schema.columns
                            WHERE table_schema = 'public' AND table_name = ?
                        """;
                try (PreparedStatement colStmt = conn.prepareStatement(columnsQuery)) {
                    colStmt.setString(1, tableName);
                    try (ResultSet colRs = colStmt.executeQuery()) {
                        while (colRs.next()) {
                            System.out.printf("   üîπ %s : %s%n", colRs.getString("column_name"), colRs.getString("data_type"));
                        }
                    }
                }
            }
            if (!hasTables) {
                System.out.println("–¢–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.");
            }
        }
    }

    public void createTables() throws SQLException {
        Scanner scanner = new Scanner(System.in);

        for (Map.Entry<String, Map<String, String>> entry : tableSchemas.entrySet()) {
            String tableName;
            while (true) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ö–µ–º—ã:");
                tableName = scanner.nextLine().trim();
                if (!tableName.isEmpty()) {
                    break;
                }
                System.out.println("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }

            Map<String, String> columns = new LinkedHashMap<>();
            int colIndex = 0;
            for (Map.Entry<String, String> column : entry.getValue().entrySet()) {
                String columnName;
                while (true) {
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ #" + (colIndex + 1) + " (—Ç–∏–ø: " + column.getValue() + "):");
                    columnName = scanner.nextLine().trim();
                    if (!columnName.isEmpty()) {
                        break;
                    }
                    System.out.println("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                columns.put(columnName, column.getValue());
                colIndex++;
            }

            if (!isTableExists(tableName)) {
                StringBuilder sb = new StringBuilder("CREATE TABLE " + tableName + " (");

                int i = 0;
                for (Map.Entry<String, String> column : columns.entrySet()) {
                    sb.append(column.getKey()).append(" ").append(column.getValue());
                    if (i < columns.size() - 1) sb.append(", ");
                    i++;
                }

                sb.append(")");

                try (Statement stmt = conn.createStatement()) {
                    stmt.executeUpdate(sb.toString());
                    System.out.println("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: " + tableName);
                }
            } else {
                System.out.println("–¢–∞–±–ª–∏—Ü–∞ " + tableName + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }
    }


    public void insertRowIntoDB(String tablename, Map<String, Object> data) throws SQLException {
        if (!tableSchemas.values().stream().anyMatch(schema ->
                schema.size() == data.size() + 1)) { // +1 –¥–ª—è —É—á–µ—Ç–∞ id
            throw new SQLException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ö–µ–º–µ");
        }

        if (data == null || data.isEmpty()) {
            throw new IllegalArgumentException("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
        }

        String columns = String.join(", ", data.keySet());
        String placeholders = String.join(", ", data.keySet().stream().map(k -> "?").toList());

        String sql = "INSERT INTO " + tablename + " (" + columns + ") VALUES (" + placeholders + ")";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            int index = 1;
            for (Object value : data.values()) {
                pstmt.setObject(index++, value);
            }
            pstmt.executeUpdate();
        }
    }



    public boolean isTableExists(String tableName) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet rs = meta.getTables(null, null, tableName, new String[]{"TABLE"})) {
            return rs.next();
        }
    }

    public void saveToExcel() throws SQLException {
        Scanner sc = new Scanner(System.in);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:");
        String tableName = sc.nextLine().trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if (!isTableExists(tableName)) {
            System.out.println("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:");
        String fileName = sc.nextLine().trim();
        if (!fileName.toLowerCase().endsWith(".xlsx")) {
            fileName += ".xlsx";
        }

        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            System.out.println("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: " + tableName);
            String query = "SELECT * FROM " + tableName;

            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(query)) {

                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                XSSFSheet sheet = workbook.createSheet(tableName);

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
                Row titleRow = sheet.createRow(0);
                titleRow.createCell(0).setCellValue("–¢–∞–±–ª–∏—Ü–∞: " + tableName);

                // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                Row header = sheet.createRow(1);
                for (int i = 1; i <= columnCount; i++) {
                    header.createCell(i - 1).setCellValue(metaData.getColumnName(i));
                }

                // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                int rowIndex = 2;
                while (rs.next()) {
                    Row row = sheet.createRow(rowIndex++);
                    for (int i = 1; i <= columnCount; i++) {
                        Object value = rs.getObject(i);
                        if (value != null) {
                            row.createCell(i - 1).setCellValue(value.toString());
                        } else {
                            row.createCell(i - 1).setCellValue("");
                        }
                    }
                }

                // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                for (int i = 0; i < columnCount; i++) {
                    sheet.autoSizeColumn(i);
                }

            } catch (SQLException e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã " + tableName + ": " + e.getMessage());
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try (FileOutputStream fos = new FileOutputStream(fileName)) {
                workbook.write(fos);
                System.out.println("–¢–∞–±–ª–∏—Ü–∞ '" + tableName + "' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: " + fileName);
            }

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }



    public Map<String, String> getFromTable(String query) throws SQLException {
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            if (rs.next()) {
                String str1 = rs.getString("first_string");
                String str2 = rs.getString("second_string");

                return Map.of("first_string", str1,
                        "second_string", str2);
            } else {
                System.out.println("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.");
                return Map.of();
            }

        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –¥–ª–∏–Ω—ã: " + e.getMessage());
        }
        return Map.of();
    }

    public void closeConnection() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
            System.out.println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
        }
    }

    public boolean hasTables() throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet rs = meta.getTables(null, null, "%", new String[]{"TABLE"})) {
            return rs.next(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
        }
    }
}
